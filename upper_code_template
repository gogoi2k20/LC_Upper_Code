#pragma GCC optimize ("Ofast") 
#include<bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define el "\n"
#define all(x)              (x).begin(), (x).end() 
#define pb push_back
#define pbb pop_back
#define si  set<ll>
#define mi  map<ll,ll>
#define ml map<ll,ll>  
#define sl set<ll>
#define pqm priority_queue<ll,vector<ll>,greater<ll>> 
#define pq priority_queue<ll> 
#define ff first
#define ss second
using namespace std;
const ll mod =1000000007;
ll kadane(vector<ll>&a){  ll maxEnd=a[0];    ll ans=a[0];   ll n=a.size();   for(ll i=1;i<n;i++){    maxEnd=max(a[i],maxEnd+a[i]);       ans=max(ans,maxEnd);   } return ans;}
ll toggleKthBit(ll n, ll k){return (n ^ (1LL << (k)));}
ll isKthBitSet(ll n, ll k){    if (n & (1LL << k))return 1;return 0; }
ll setKthBit(ll n, ll k){/* kth bit of n is being set by this operation*/ return ((1LL << k) | n);}
ll clearBit(ll n, ll k){return (n & (~(1LL << (k))));}

//If u get runtime error
//only check for array index out of bounds
// don't pass dp's on parameters,rather do global declarations


// Structure to sort a priority queue on
// the basis of first element of the pair
struct mycomp {
    bool operator()(pair<int, int> p1,
                    pair<int, int> p2)
    {
        return p1.first < p2.first;
    }
};

